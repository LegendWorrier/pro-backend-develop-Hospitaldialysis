version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:
  test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-alpine
      - image: postgres:13.1-alpine
        name: Postgres
        environment:
          POSTGRES_PASSWORD=admin1234
    steps:

      - run:
          name: Init Git SSH and required libs
          command: |
            apk add git
            apk add --update openssh
            echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
            echo http://dl-cdn.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories
            apk add tzdata icu-libs msttcorefonts-installer fontconfig
            update-ms-fonts
            fc-cache -f
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
      - run:
          name: Setup NUGET
          command: |
            echo $NUGET > NuGet.tmp
            base64 -d NuGet.tmp > NuGet.Config
            rm NuGet.tmp
      - run:
          name: Test
          command: dotnet test HemoDialysisPro/HemoDialysisPro.sln -c Release /p:IsTest=true

  publish:
    docker:
      - image: wasenshi/dockerbuild
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - server.tar
            - job.tar
            - report.tar
      - run:
          name: Load Docker image layer caches
          command: |
            set +o pipefail
            docker load -i server.tar | true
            docker load -i job.tar | true
            docker load -i report.tar | true
      - run:
          name: Setup NUGET
          command: |
            echo $NUGET > NuGet.tmp
            base64 -d NuGet.tmp > NuGet.Config
            rm NuGet.tmp
      - run:
          name: Setup Fingerprint and Keys
          command: |
            sed -i '1 s/.*/'"$FINGERPRINT"'/' HemoDialysisPro/Wasenshi.HemoDialysisPro.Share/Fingerprint.txt
            find HemoDialysisPro/Wasenshi.HemoDialysisPro.Share/ -type f -name "*.tt" -exec /opt/t4/t4 {} \;
      - run:
          name: Build Image File - WebAPI
          command: |
            export ASSEMBLY_VERSION=$(grep '<AssemblyVersion>' HemoDialysisPro/Wasenshi.HemoDialysisPro.Web.Api/Wasenshi.HemoDialysisPro.Web.Api.csproj | sed 's/ *$//g' | awk -F'[<>]' '{print $3}')
            export APP_VERSION=$(echo $ASSEMBLY_VERSION | cut -d'.' -f1-3)
            echo $APP_VERSION
            zipName=$(echo hemodialysis-backend-server-$APP_VERSION.tar)
            echo $zipName

            docker image build -f Dockerfile.WebApi.Publish -t wasenshi/hemodialysis-backend-server:latest --cache-from=wasenshi/hemodialysis-backend-server .
            docker save wasenshi/hemodialysis-backend-server:latest > server.tar

            mkdir /HemoDialysisPro;
            cp server.tar /HemoDialysisPro/$zipName
      - run:
          name: Build Image File - ReportAPI
          command: |
            export ASSEMBLY_VERSION=$(grep '<AssemblyVersion>' HemoDialysisPro/Wasenshi.HemoDialysisPro.Report.Api/Wasenshi.HemoDialysisPro.Report.Api.csproj | sed 's/ *$//g' | awk -F'[<>]' '{print $3}')
            export APP_VERSION=$(echo $ASSEMBLY_VERSION | cut -d'.' -f1-3)
            echo $APP_VERSION
            zipName=$(echo hemodialysis-report-api-$APP_VERSION.tar)
            echo $zipName

            docker image build -f Dockerfile.ReportApi.Publish -t wasenshi/hemodialysis-report-api:latest --cache-from=wasenshi/hemodialysis-report-api .
            docker save wasenshi/hemodialysis-report-api:latest > report.tar
            
            cp report.tar /HemoDialysisPro/$zipName
      - run:
          name: Build Image File - JobServer
          command: |
            export ASSEMBLY_VERSION=$(grep '<AssemblyVersion>' HemoDialysisPro/Wasenshi.HemoDialysisPro.JobServer/Wasenshi.HemoDialysisPro.JobServer.csproj | sed 's/ *$//g' | awk -F'[<>]' '{print $3}')
            export APP_VERSION=$(echo $ASSEMBLY_VERSION | cut -d'.' -f1-3)
            echo $APP_VERSION
            zipName=$(echo hemodialysis-job-server-$APP_VERSION.tar)
            echo $zipName

            docker image build -f Dockerfile.JobServer.Publish -t wasenshi/hemodialysis-job-server:latest --cache-from=wasenshi/hemodialysis-job-server .
            docker save wasenshi/hemodialysis-job-server:latest > job.tar

            cp job.tar /HemoDialysisPro/$zipName
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - server.tar
            - job.tar
            - report.tar
      - store_artifacts:
          path: /HemoDialysisPro

workflows:
  version: 2
  test_and_publish_artifact:
    jobs:
      - test
      - build_approval:
          type: approval
          requires:
            - test
          filters:
            branches:
              only: develop
      - publish:
          requires:
            - build_approval
