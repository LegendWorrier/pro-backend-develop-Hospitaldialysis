// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wasenshi.HemoDialysisPro.Repositories;

#nullable disable

namespace Wasenshi.HemoDialysisPro.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230912052830_InitializeDB_and_SeedData")]
    partial class InitializeDB_and_SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.AVShunt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<int>("CatheterType")
                        .HasColumnType("integer");

                    b.Property<string>("CatheterizationInstitution")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReasonForDiscontinuation")
                        .HasColumnType("text");

                    b.Property<string>("ShuntSite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("AvShunts");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.AVShuntIssueTreatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("AbnormalDatetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CathId")
                        .HasColumnType("uuid");

                    b.Property<string>("Complications")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<string>("Hospital")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TreatmentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TreatmentResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("AvShuntIssueTreatments");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Admission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("AN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Admit")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChiefComplaint")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Discharged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Room")
                        .HasColumnType("text");

                    b.Property<string>("StatusDc")
                        .HasColumnType("text");

                    b.Property<string>("TelNo")
                        .HasColumnType("text");

                    b.Property<string>("TransferTo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.AdmissionUnderlying", b =>
                {
                    b.Property<Guid>("AdmissionId")
                        .HasColumnType("uuid");

                    b.Property<int>("UnderlyingId")
                        .HasColumnType("integer");

                    b.HasKey("AdmissionId", "UnderlyingId");

                    b.HasIndex("AdmissionId")
                        .HasDatabaseName("Index_Admission_Underlying");

                    b.HasIndex("UnderlyingId");

                    b.ToTable("AdmissionUnderlyings");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Anticoagulant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("Anticoagulants");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Heparin"
                        },
                        new
                        {
                            Id = -2,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Clexane"
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Assessment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("HasNumber")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOther")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasText")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("Multi")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("OptionType")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Assessments");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Pain",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "pain",
                            OptionType = 1,
                            Order = 0,
                            Type = 0
                        },
                        new
                        {
                            Id = -2L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Chest discomfort",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "chest",
                            OptionType = 1,
                            Order = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = -3L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Dyspnea",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "dyspnea",
                            OptionType = 1,
                            Order = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = -4L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Fever",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "fever",
                            OptionType = 1,
                            Order = 3,
                            Type = 0
                        },
                        new
                        {
                            Id = -5L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Headache",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "head",
                            OptionType = 1,
                            Order = 4,
                            Type = 0
                        },
                        new
                        {
                            Id = -6L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Nausea/Vomit",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "vomit",
                            OptionType = 1,
                            Order = 5,
                            Type = 0
                        },
                        new
                        {
                            Id = -7L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Sleep disturbance",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "sleep",
                            OptionType = 1,
                            Order = 6,
                            Type = 0
                        },
                        new
                        {
                            Id = -8L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Bleeding",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "bleeding",
                            OptionType = 1,
                            Order = 7,
                            Type = 0
                        },
                        new
                        {
                            Id = -9L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Itching",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "itching",
                            OptionType = 1,
                            Order = 8,
                            Type = 0
                        },
                        new
                        {
                            Id = -10L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Engorged neck vein",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "neck",
                            OptionType = 1,
                            Order = 9,
                            Type = 0
                        },
                        new
                        {
                            Id = -11L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Pale",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "pale",
                            OptionType = 1,
                            Order = 10,
                            Type = 0
                        },
                        new
                        {
                            Id = -12L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Edema",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "edema",
                            OptionType = 1,
                            Order = 11,
                            Type = 0
                        },
                        new
                        {
                            Id = -13L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Poor oral intake",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "oral",
                            OptionType = 1,
                            Order = 12,
                            Type = 0
                        },
                        new
                        {
                            Id = -14L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Psychosocial problem",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "psycho",
                            OptionType = 1,
                            Order = 13,
                            Type = 0
                        },
                        new
                        {
                            Id = -15L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Other",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "other",
                            OptionType = 1,
                            Order = 14,
                            Type = 0
                        },
                        new
                        {
                            Id = -16L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Inflammation",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "inflame",
                            OptionType = 1,
                            Order = 15,
                            Type = 0
                        },
                        new
                        {
                            Id = -17L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Thrill",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "thrill",
                            OptionType = 1,
                            Order = 16,
                            Type = 0
                        },
                        new
                        {
                            Id = -18L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Bruit",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = true,
                            Name = "bruit",
                            OptionType = 1,
                            Order = 17,
                            Type = 0
                        },
                        new
                        {
                            Id = -19L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Machine Test",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "machine",
                            OptionType = 1,
                            Order = 18,
                            Type = 0
                        },
                        new
                        {
                            Id = -20L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "High risk of fall due location",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = false,
                            Name = "fall",
                            OptionType = 1,
                            Order = 19,
                            Type = 0
                        },
                        new
                        {
                            Id = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Complication",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = true,
                            Name = "complication",
                            OptionType = 1,
                            Order = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = -22L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Technical Complication",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = true,
                            Name = "technical",
                            OptionType = 1,
                            Order = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Nursing Intervention",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = true,
                            Name = "nursing",
                            OptionType = 1,
                            Order = 2,
                            Type = 1
                        },
                        new
                        {
                            Id = -24L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Health Education",
                            HasNumber = false,
                            HasOther = false,
                            HasText = false,
                            IsActive = true,
                            Multi = true,
                            Name = "health",
                            OptionType = 1,
                            Order = 3,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.AssessmentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("AssessmentGroups");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.AssessmentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<Guid>("HemosheetId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("IsReassessment")
                        .HasColumnType("boolean");

                    b.Property<long[]>("Selected")
                        .HasColumnType("bigint[]");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<float?>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("HemosheetId");

                    b.ToTable("AssessmentItems");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.AssessmentOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("TextValue")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<float?>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("AssessmentOptions");

                    b.HasData(
                        new
                        {
                            Id = -99L,
                            AssessmentId = -18L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Continue",
                            IsActive = true,
                            IsDefault = false,
                            Name = "continue",
                            Order = 0
                        },
                        new
                        {
                            Id = -98L,
                            AssessmentId = -18L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Systolic",
                            IsActive = true,
                            IsDefault = false,
                            Name = "systolic",
                            Order = 1
                        },
                        new
                        {
                            Id = -97L,
                            AssessmentId = -19L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Ok",
                            IsActive = true,
                            IsDefault = false,
                            Name = "yes",
                            Order = 0
                        },
                        new
                        {
                            Id = -96L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "No complication",
                            IsActive = true,
                            IsDefault = false,
                            Name = "no",
                            Order = 0
                        },
                        new
                        {
                            Id = -95L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Hypo-tension",
                            IsActive = true,
                            IsDefault = false,
                            Name = "hypo",
                            Order = 1
                        },
                        new
                        {
                            Id = -94L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Muscle cramp",
                            IsActive = true,
                            IsDefault = false,
                            Name = "muscle",
                            Order = 2
                        },
                        new
                        {
                            Id = -93L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Headache",
                            IsActive = true,
                            IsDefault = false,
                            Name = "head",
                            Order = 3
                        },
                        new
                        {
                            Id = -92L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Nausea/Vomit",
                            IsActive = true,
                            IsDefault = false,
                            Name = "vomit",
                            Order = 4
                        },
                        new
                        {
                            Id = -91L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Fever",
                            IsActive = true,
                            IsDefault = false,
                            Name = "fever",
                            Order = 5
                        },
                        new
                        {
                            Id = -90L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Hypertension",
                            IsActive = true,
                            IsDefault = false,
                            Name = "hyper",
                            Order = 6
                        },
                        new
                        {
                            Id = -89L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Chest pain",
                            IsActive = true,
                            IsDefault = false,
                            Name = "chest",
                            Order = 7
                        },
                        new
                        {
                            Id = -88L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Arrhythmia",
                            IsActive = true,
                            IsDefault = false,
                            Name = "arr",
                            Order = 8
                        },
                        new
                        {
                            Id = -87L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Vascular access problem",
                            IsActive = true,
                            IsDefault = false,
                            Name = "vascular",
                            Order = 9
                        },
                        new
                        {
                            Id = -86L,
                            AssessmentId = -21L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Others",
                            IsActive = true,
                            IsDefault = false,
                            Name = "other",
                            Order = 10
                        },
                        new
                        {
                            Id = -85L,
                            AssessmentId = -22L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "No complication",
                            IsActive = true,
                            IsDefault = false,
                            Name = "no",
                            Order = 0
                        },
                        new
                        {
                            Id = -84L,
                            AssessmentId = -22L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Clotted dialyzer",
                            IsActive = true,
                            IsDefault = false,
                            Name = "dialyzer",
                            Order = 1
                        },
                        new
                        {
                            Id = -83L,
                            AssessmentId = -22L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Clotted blood line",
                            IsActive = true,
                            IsDefault = false,
                            Name = "bloodline",
                            Order = 2
                        },
                        new
                        {
                            Id = -82L,
                            AssessmentId = -22L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Machine problem",
                            IsActive = true,
                            IsDefault = false,
                            Name = "machine",
                            Order = 3
                        },
                        new
                        {
                            Id = -81L,
                            AssessmentId = -22L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Blood leak",
                            IsActive = true,
                            IsDefault = false,
                            Name = "bloodleak",
                            Order = 4
                        },
                        new
                        {
                            Id = -80L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Psychological support",
                            IsActive = true,
                            IsDefault = false,
                            Name = "psycho",
                            Order = 0
                        },
                        new
                        {
                            Id = -79L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Trendelenburg position",
                            IsActive = true,
                            IsDefault = false,
                            Name = "tren",
                            Order = 1
                        },
                        new
                        {
                            Id = -78L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Monitor vital signs",
                            IsActive = true,
                            IsDefault = false,
                            Name = "vital",
                            Order = 2
                        },
                        new
                        {
                            Id = -77L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Pause ultrafiltration",
                            IsActive = true,
                            IsDefault = false,
                            Name = "uf",
                            Order = 3
                        },
                        new
                        {
                            Id = -76L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Decrease dialysate temperature",
                            IsActive = true,
                            IsDefault = false,
                            Name = "temp",
                            Order = 4
                        },
                        new
                        {
                            Id = -75L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Oxygen therapy",
                            IsActive = true,
                            IsDefault = false,
                            Name = "oxygen",
                            Order = 5
                        },
                        new
                        {
                            Id = -74L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Hot compression",
                            IsActive = true,
                            IsDefault = false,
                            Name = "hot",
                            Order = 6
                        },
                        new
                        {
                            Id = -73L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Strength exercise",
                            IsActive = true,
                            IsDefault = false,
                            Name = "exercise",
                            Order = 7
                        },
                        new
                        {
                            Id = -72L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Cold compression",
                            IsActive = true,
                            IsDefault = false,
                            Name = "cold",
                            Order = 8
                        },
                        new
                        {
                            Id = -71L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Aspirate precaution",
                            IsActive = true,
                            IsDefault = false,
                            Name = "aspirate",
                            Order = 9
                        },
                        new
                        {
                            Id = -70L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Monitor EKG",
                            IsActive = true,
                            IsDefault = false,
                            Name = "ekg",
                            Order = 10
                        },
                        new
                        {
                            Id = -69L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Decrease BFR",
                            IsActive = true,
                            IsDefault = false,
                            Name = "bfr",
                            Order = 11
                        },
                        new
                        {
                            Id = -68L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Monitor access flow",
                            IsActive = true,
                            IsDefault = false,
                            Name = "flow",
                            Order = 12
                        },
                        new
                        {
                            Id = -67L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Change dialyzer",
                            IsActive = true,
                            IsDefault = false,
                            Name = "dialyzer",
                            Order = 13
                        },
                        new
                        {
                            Id = -66L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Change blood line",
                            IsActive = true,
                            IsDefault = false,
                            Name = "bloodline",
                            Order = 14
                        },
                        new
                        {
                            Id = -65L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Notified physician",
                            IsActive = true,
                            IsDefault = false,
                            Name = "notify",
                            Order = 15
                        },
                        new
                        {
                            Id = -64L,
                            AssessmentId = -23L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Others",
                            IsActive = true,
                            IsDefault = false,
                            Name = "other",
                            Order = 16
                        },
                        new
                        {
                            Id = -63L,
                            AssessmentId = -24L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Nutrition",
                            IsActive = true,
                            IsDefault = false,
                            Name = "nutrition",
                            Order = 0
                        },
                        new
                        {
                            Id = -62L,
                            AssessmentId = -24L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Vascular access",
                            IsActive = true,
                            IsDefault = false,
                            Name = "vascular",
                            Order = 1
                        },
                        new
                        {
                            Id = -61L,
                            AssessmentId = -24L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Exercise",
                            IsActive = true,
                            IsDefault = false,
                            Name = "exercise",
                            Order = 2
                        },
                        new
                        {
                            Id = -60L,
                            AssessmentId = -24L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Personal hygiene",
                            IsActive = true,
                            IsDefault = false,
                            Name = "hygiene",
                            Order = 3
                        },
                        new
                        {
                            Id = -59L,
                            AssessmentId = -24L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Medication",
                            IsActive = true,
                            IsDefault = false,
                            Name = "medication",
                            Order = 4
                        },
                        new
                        {
                            Id = -58L,
                            AssessmentId = -24L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Fluid control",
                            IsActive = true,
                            IsDefault = false,
                            Name = "fluid",
                            Order = 5
                        },
                        new
                        {
                            Id = -57L,
                            AssessmentId = -24L,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "KT preparation",
                            IsActive = true,
                            IsDefault = false,
                            Name = "kt",
                            Order = 6
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.DeathCause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("CauseOfDeath");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Heart Failure"
                        },
                        new
                        {
                            Id = -2,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Hypertension"
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Dialysate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Ca")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<float>("K")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("Dialysates");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Ca = 3.5f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 3f
                        },
                        new
                        {
                            Id = -2,
                            Ca = 3f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 3f
                        },
                        new
                        {
                            Id = -3,
                            Ca = 2.5f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 3f
                        },
                        new
                        {
                            Id = -4,
                            Ca = 2f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 3f
                        },
                        new
                        {
                            Id = -5,
                            Ca = 3.5f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 2.5f
                        },
                        new
                        {
                            Id = -6,
                            Ca = 2.5f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 2.5f
                        },
                        new
                        {
                            Id = -7,
                            Ca = 3.5f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 2f
                        },
                        new
                        {
                            Id = -8,
                            Ca = 3f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 2f
                        },
                        new
                        {
                            Id = -9,
                            Ca = 2.5f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 2f
                        },
                        new
                        {
                            Id = -10,
                            Ca = 2f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 2f
                        },
                        new
                        {
                            Id = -11,
                            Ca = 3.5f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 1f
                        },
                        new
                        {
                            Id = -12,
                            Ca = 2.5f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 1f
                        },
                        new
                        {
                            Id = -13,
                            Ca = 3.5f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 0f
                        },
                        new
                        {
                            Id = -14,
                            Ca = 2.5f,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            K = 0f
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.DialysisPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<float?>("ANeedleCC")
                        .HasColumnType("real");

                    b.Property<float?>("AcPerSession")
                        .HasColumnType("real");

                    b.Property<float?>("AcPerSessionMl")
                        .HasColumnType("real");

                    b.Property<string>("Anticoagulant")
                        .HasColumnType("text");

                    b.Property<int?>("ArterialNeedle")
                        .HasColumnType("integer");

                    b.Property<float?>("AvgDialyzerReuse")
                        .HasColumnType("real");

                    b.Property<string>("BloodAccessRoute")
                        .HasColumnType("text");

                    b.Property<float?>("BloodFlow")
                        .HasColumnType("real");

                    b.Property<float?>("BloodTransfusion")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<float?>("DialysateCa")
                        .HasColumnType("real");

                    b.Property<float?>("DialysateFlowRate")
                        .HasColumnType("real");

                    b.Property<float?>("DialysateK")
                        .HasColumnType("real");

                    b.Property<float?>("DialysateTemperature")
                        .HasColumnType("real");

                    b.Property<Guid?>("DialysisNurse")
                        .HasColumnType("uuid");

                    b.Property<string>("Dialyzer")
                        .HasColumnType("text");

                    b.Property<float?>("DialyzerSurfaceArea")
                        .HasColumnType("real");

                    b.Property<float?>("DryWeight")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<float?>("ExcessFluidRemovalAmount")
                        .HasColumnType("real");

                    b.Property<float?>("ExtraFluid")
                        .HasColumnType("real");

                    b.Property<short?>("Frequency")
                        .HasColumnType("smallint");

                    b.Property<float?>("HCO3")
                        .HasColumnType("real");

                    b.Property<int?>("HdfType")
                        .HasColumnType("integer");

                    b.Property<float?>("InitialAmount")
                        .HasColumnType("real");

                    b.Property<float?>("InitialAmountMl")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("IvSupplementPosition")
                        .HasColumnType("text");

                    b.Property<float?>("IvSupplementVolume")
                        .HasColumnType("real");

                    b.Property<float?>("MaintainAmount")
                        .HasColumnType("real");

                    b.Property<float?>("MaintainAmountMl")
                        .HasColumnType("real");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<float?>("Na")
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReasonForRefraining")
                        .HasColumnType("text");

                    b.Property<float?>("SubstituteVolume")
                        .HasColumnType("real");

                    b.Property<bool>("Temporary")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<float?>("VNeedleCC")
                        .HasColumnType("real");

                    b.Property<int?>("VenousNeedle")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DialysisPrescriptions");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.DialysisRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<int?>("AP")
                        .HasColumnType("integer");

                    b.Property<float?>("AcLoading")
                        .HasColumnType("real");

                    b.Property<float?>("AcMaintain")
                        .HasColumnType("real");

                    b.Property<float?>("BC")
                        .HasColumnType("real");

                    b.Property<float?>("BFAV")
                        .HasColumnType("real");

                    b.Property<float?>("BFR")
                        .HasColumnType("real");

                    b.Property<int?>("BPD")
                        .HasColumnType("integer");

                    b.Property<int?>("BPS")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<float?>("DBV")
                        .HasColumnType("real");

                    b.Property<float?>("DC")
                        .HasColumnType("real");

                    b.Property<float?>("DCTarget")
                        .HasColumnType("real");

                    b.Property<float?>("DFR")
                        .HasColumnType("real");

                    b.Property<float?>("DFRTarget")
                        .HasColumnType("real");

                    b.Property<int?>("DP")
                        .HasColumnType("integer");

                    b.Property<float?>("DT")
                        .HasColumnType("real");

                    b.Property<float?>("DTTarget")
                        .HasColumnType("real");

                    b.Property<string>("Dialysate")
                        .HasColumnType("text");

                    b.Property<float?>("Glucose50")
                        .HasColumnType("real");

                    b.Property<float?>("HAV")
                        .HasColumnType("real");

                    b.Property<float?>("HCO3")
                        .HasColumnType("real");

                    b.Property<int?>("HR")
                        .HasColumnType("integer");

                    b.Property<Guid>("HemodialysisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("IsFromMachine")
                        .HasColumnType("boolean");

                    b.Property<float?>("Ktv")
                        .HasColumnType("real");

                    b.Property<string>("Mode")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<float?>("NSS")
                        .HasColumnType("real");

                    b.Property<string>("NaProfile")
                        .HasColumnType("text");

                    b.Property<float?>("NaTarget")
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<float?>("PRR")
                        .HasColumnType("real");

                    b.Property<int?>("RR")
                        .HasColumnType("integer");

                    b.Property<int?>("RecirculationRate")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("Remaining")
                        .HasColumnType("interval");

                    b.Property<float?>("SAV")
                        .HasColumnType("real");

                    b.Property<float?>("SRate")
                        .HasColumnType("real");

                    b.Property<float?>("STarget")
                        .HasColumnType("real");

                    b.Property<float?>("STemp")
                        .HasColumnType("real");

                    b.Property<int?>("TMP")
                        .HasColumnType("integer");

                    b.Property<float?>("Temp")
                        .HasColumnType("real");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UFProfile")
                        .HasColumnType("text");

                    b.Property<float?>("UFRate")
                        .HasColumnType("real");

                    b.Property<float?>("UFTarget")
                        .HasColumnType("real");

                    b.Property<float?>("UFTotal")
                        .HasColumnType("real");

                    b.Property<float?>("URR")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<int?>("VP")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DialysisRecords");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.DialysisRecordAssessmentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<Guid>("DialysisRecordId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<long[]>("Selected")
                        .HasColumnType("bigint[]");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<float?>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("DialysisRecordId");

                    b.ToTable("DialysisRecordAssessmentItems");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.DoctorRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<Guid>("HemodialysisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("DoctorRecords");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Dialyzer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("BrandName")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<int>("Flux")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<int>("Membrane")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PieceUnit")
                        .HasColumnType("text");

                    b.Property<float?>("SurfaceArea")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("Dialyzers");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            BrandName = "Nikkiso",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Flux = 1,
                            IsActive = true,
                            Membrane = 2,
                            Name = "FDX-21",
                            SurfaceArea = 2.1f
                        },
                        new
                        {
                            Id = -2,
                            BrandName = "Nikkiso",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Flux = 1,
                            IsActive = true,
                            Membrane = 2,
                            Name = "FDY-21",
                            SurfaceArea = 2.1f
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PieceUnit")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.MedicalSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PieceUnit")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("MedicalSupplies");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<float?>("Dose")
                        .HasColumnType("real");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<int>("MedType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PieceUnit")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<int>("UsageWays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            MedType = 0,
                            Name = "Heparin",
                            UsageWays = 0
                        },
                        new
                        {
                            Id = -2,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            MedType = 0,
                            Name = "Diovan",
                            UsageWays = 0
                        },
                        new
                        {
                            Id = -3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            MedType = 0,
                            Name = "Buscopan",
                            UsageWays = 0
                        },
                        new
                        {
                            Id = -4,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            MedType = 0,
                            Name = "Aminoven",
                            UsageWays = 0
                        },
                        new
                        {
                            Id = -5,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            MedType = 0,
                            Name = "NGT",
                            UsageWays = 0
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.StockItemBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("IsCredit")
                        .HasColumnType("boolean");

                    b.Property<double>("PricePerPiece")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("StockType")
                        .HasColumnType("integer");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("StockItems", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ExecutionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("CoSign")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<Guid>("HemodialysisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("IsExecuted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("HemodialysisId");

                    b.ToTable("ExecutionRecords");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.FileEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<string>("Uri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.HemoNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Complication")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<Guid>("HemoId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("HemoId")
                        .IsUnique()
                        .HasDatabaseName("Index_HemoId");

                    b.ToTable("HemoNotes");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.HemodialysisRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<bool>("AcNotUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("Admission")
                        .HasColumnType("integer");

                    b.Property<string>("Bed")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<DateTime?>("CycleEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CycleStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DialysisPrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("DoctorConsent")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<float?>("FlushNSS")
                        .HasColumnType("real");

                    b.Property<int?>("FlushNSSInterval")
                        .HasColumnType("integer");

                    b.Property<int?>("FlushTimes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("IsICU")
                        .HasColumnType("boolean");

                    b.Property<Guid[]>("NursesInShift")
                        .HasColumnType("uuid[]");

                    b.Property<bool>("OutsideUnit")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProofReader")
                        .HasColumnType("uuid");

                    b.Property<string>("ReasonForRefraining")
                        .HasColumnType("text");

                    b.Property<bool>("SentPDF")
                        .HasColumnType("boolean");

                    b.Property<int>("ShiftSectionId")
                        .HasColumnType("integer");

                    b.Property<int?>("TreatmentNo")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<string>("Ward")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DialysisPrescriptionId");

                    b.ToTable("HemodialysisRecords");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Infrastructor.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Infrastructor.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Infrastructor.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Infrastructor.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("866dabc4-6501-44d2-a0e5-65da9c45a46e"),
                            RoleId = new Guid("2bade702-40e6-4df4-890d-7f0c67d50207")
                        },
                        new
                        {
                            UserId = new Guid("866dabc4-6501-44d2-a0e5-65da9c45a46e"),
                            RoleId = new Guid("e958724f-6db8-4434-a804-f0277f02306a")
                        },
                        new
                        {
                            UserId = new Guid("866dabc4-6501-44d2-a0e5-65da9c45a46e"),
                            RoleId = new Guid("a7c93a18-5c50-4e28-b02d-3b50cc3e17f1")
                        },
                        new
                        {
                            UserId = new Guid("866dabc4-6501-44d2-a0e5-65da9c45a46e"),
                            RoleId = new Guid("baad21b1-6d08-4823-8cf3-0776a6266488")
                        },
                        new
                        {
                            UserId = new Guid("866dabc4-6501-44d2-a0e5-65da9c45a46e"),
                            RoleId = new Guid("f903d36f-2531-4916-86bb-7b051aac7029")
                        },
                        new
                        {
                            UserId = new Guid("866dabc4-6501-44d2-a0e5-65da9c45a46e"),
                            RoleId = new Guid("9453a296-a401-480b-bf81-bca7ab0f72a7")
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Infrastructor.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.LabExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<int>("LabItemId")
                        .HasColumnType("integer");

                    b.Property<float>("LabValue")
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("LabItemId");

                    b.HasIndex("PatientId");

                    b.ToTable("LabExams");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.LabExamItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Bound")
                        .HasColumnType("integer");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemBound")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsYesNo")
                        .HasColumnType("boolean");

                    b.Property<float?>("LowerLimit")
                        .HasColumnType("real");

                    b.Property<float?>("LowerLimitF")
                        .HasColumnType("real");

                    b.Property<float?>("LowerLimitM")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TRT")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<float?>("UpperLimit")
                        .HasColumnType("real");

                    b.Property<float?>("UpperLimitF")
                        .HasColumnType("real");

                    b.Property<float?>("UpperLimitM")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("LabExamItems");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Bound = 0,
                            Category = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = true,
                            IsYesNo = false,
                            LowerLimit = 6f,
                            Name = "BUN",
                            TRT = 0,
                            Unit = "mg/dL",
                            UpperLimit = 25f
                        },
                        new
                        {
                            Id = -2,
                            Bound = 1,
                            Category = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = true,
                            IsSystemBound = true,
                            IsYesNo = false,
                            Name = "Kt/V",
                            TRT = 0,
                            Unit = ""
                        },
                        new
                        {
                            Id = -3,
                            Bound = 2,
                            Category = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = true,
                            IsSystemBound = true,
                            IsYesNo = false,
                            Name = "URR",
                            TRT = 0,
                            Unit = "%"
                        },
                        new
                        {
                            Id = 1,
                            Category = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Albumin",
                            TRT = 13,
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 2,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = true,
                            LowerLimit = 0f,
                            Name = "Anti HBc",
                            TRT = 27,
                            Unit = "-",
                            UpperLimit = 1f
                        },
                        new
                        {
                            Id = 3,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = true,
                            LowerLimit = 0f,
                            Name = "Anti HBs",
                            TRT = 26,
                            Unit = "-",
                            UpperLimit = 1f
                        },
                        new
                        {
                            Id = 4,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = true,
                            LowerLimit = 0f,
                            Name = "Anti HCV",
                            TRT = 28,
                            Unit = "-",
                            UpperLimit = 1f
                        },
                        new
                        {
                            Id = 5,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = true,
                            LowerLimit = 0f,
                            Name = "Anti HIV",
                            TRT = 29,
                            Unit = "-",
                            UpperLimit = 1f
                        },
                        new
                        {
                            Id = 6,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "AP",
                            TRT = 12,
                            Unit = "U/L"
                        },
                        new
                        {
                            Id = 7,
                            Category = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Ca",
                            TRT = 9,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 8,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Cholesterol",
                            TRT = 15,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 9,
                            Category = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Cl",
                            TRT = 7,
                            Unit = "mmol/L"
                        },
                        new
                        {
                            Id = 10,
                            Category = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "CO2",
                            TRT = 0,
                            Unit = "mmol/L"
                        },
                        new
                        {
                            Id = 11,
                            Category = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            LowerLimitF = 0.5f,
                            LowerLimitM = 0.6f,
                            Name = "Cr",
                            TRT = 3,
                            Unit = "mg/dL",
                            UpperLimitF = 1.1f,
                            UpperLimitM = 1.2f
                        },
                        new
                        {
                            Id = 12,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "DB",
                            TRT = 0,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 13,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            LowerLimit = 90f,
                            Name = "eGFR",
                            TRT = 0,
                            Unit = "ml/min/1.73m²"
                        },
                        new
                        {
                            Id = 14,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Ferritin",
                            TRT = 23,
                            Unit = "ng/ml"
                        },
                        new
                        {
                            Id = 15,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "FPG",
                            TRT = 1,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 16,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Globulin",
                            TRT = 0,
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 17,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            LowerLimitF = 12f,
                            LowerLimitM = 13f,
                            Name = "Hb",
                            TRT = 20,
                            Unit = "g/dL",
                            UpperLimitF = 16f,
                            UpperLimitM = 17.4f
                        },
                        new
                        {
                            Id = 18,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "HbA1C",
                            TRT = 2,
                            Unit = "%"
                        },
                        new
                        {
                            Id = 19,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = true,
                            LowerLimit = 0f,
                            Name = "HBsAg",
                            TRT = 25,
                            Unit = "-",
                            UpperLimit = 1f
                        },
                        new
                        {
                            Id = 20,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            LowerLimitF = 35f,
                            LowerLimitM = 40f,
                            Name = "Hct",
                            TRT = 19,
                            Unit = "%",
                            UpperLimitF = 47f,
                            UpperLimitM = 50f
                        },
                        new
                        {
                            Id = 21,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "HDL",
                            TRT = 17,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 22,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "IPTH",
                            TRT = 11,
                            Unit = "pg/ml"
                        },
                        new
                        {
                            Id = 23,
                            Category = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "K",
                            TRT = 6,
                            Unit = "mmol/L"
                        },
                        new
                        {
                            Id = 24,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "LDL",
                            TRT = 18,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 25,
                            Category = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Na",
                            TRT = 5,
                            Unit = "mmol/L"
                        },
                        new
                        {
                            Id = 26,
                            Category = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            LowerLimit = 1f,
                            Name = "nPCR",
                            TRT = 0,
                            Unit = "g/kg/d",
                            UpperLimit = 1.2f
                        },
                        new
                        {
                            Id = 27,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Platelet count",
                            TRT = 0,
                            Unit = "10³/μL"
                        },
                        new
                        {
                            Id = 28,
                            Category = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "PO4",
                            TRT = 10,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 29,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Serum iron",
                            TRT = 21,
                            Unit = "μg/dl"
                        },
                        new
                        {
                            Id = 30,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "SGOT",
                            TRT = 0,
                            Unit = "U/L"
                        },
                        new
                        {
                            Id = 31,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "SGPT",
                            TRT = 0,
                            Unit = "U/L"
                        },
                        new
                        {
                            Id = 32,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "spKT/V",
                            TRT = 0,
                            Unit = "-"
                        },
                        new
                        {
                            Id = 33,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Stool occult blood",
                            TRT = 0,
                            Unit = "-"
                        },
                        new
                        {
                            Id = 34,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "TB",
                            TRT = 0,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 35,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "TIBC",
                            TRT = 22,
                            Unit = "μg/dl"
                        },
                        new
                        {
                            Id = 36,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Total protein",
                            TRT = 14,
                            Unit = "g/dL"
                        },
                        new
                        {
                            Id = 37,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Triglyceride",
                            TRT = 16,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 38,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "TSAT",
                            TRT = 24,
                            Unit = "%"
                        },
                        new
                        {
                            Id = 39,
                            Category = 3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "Uric acid",
                            TRT = 4,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 40,
                            Category = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "VLDL",
                            TRT = 0,
                            Unit = "mg/dL"
                        },
                        new
                        {
                            Id = 41,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            IsCalculated = false,
                            IsSystemBound = false,
                            IsYesNo = false,
                            Name = "WBC",
                            TRT = 0,
                            Unit = "10³/μL"
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.LabHemosheet", b =>
                {
                    b.Property<int>("LabItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OnlyOnDate")
                        .HasColumnType("boolean");

                    b.HasKey("LabItemId");

                    b.ToTable("LabHemosheets");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.LabOverview", b =>
                {
                    b.Property<DateTime?>("LastRecord")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.HasIndex("PatientId");

                    b.ToTable((string)null);

                    b.ToView("LabOverviews", (string)null);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.MedCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("MedCategories");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Oral"
                        },
                        new
                        {
                            Id = -2,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Injection"
                        },
                        new
                        {
                            Id = -3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Insulin"
                        },
                        new
                        {
                            Id = -4,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "ST and Injection"
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.MedHistoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<float?>("OverrideDose")
                        .HasColumnType("real");

                    b.Property<string>("OverrideUnit")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineHistories");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.MedicinePrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("AdministerDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<string>("HospitalName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<float?>("OverrideDose")
                        .HasColumnType("real");

                    b.Property<string>("OverrideUnit")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Route")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicinePrescriptions");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Needle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("Needles");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Number = 15
                        },
                        new
                        {
                            Id = -2,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Number = 16
                        },
                        new
                        {
                            Id = -3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Number = 17
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.NurseRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<Guid>("HemodialysisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("NurseRecords");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("Admission")
                        .HasColumnType("integer");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BloodType")
                        .HasColumnType("text");

                    b.Property<int?>("CoverageScheme")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("HospitalNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityNo")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("RFID")
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .HasColumnType("text");

                    b.Property<string>("TransferFrom")
                        .HasColumnType("text");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("Index_Name");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.PatientHistory", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<int>("HistoryItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<float?>("NumberValue")
                        .HasColumnType("real");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("PatientId", "HistoryItemId");

                    b.ToTable("PatientHistories");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.PatientHistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowOther")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("IsNumber")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsYesNo")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("TRT")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("PatientHistoryItems");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AllowOther = false,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Height",
                            IsActive = true,
                            IsNumber = true,
                            IsYesNo = false,
                            Name = "height",
                            Order = 1,
                            TRT = 5
                        },
                        new
                        {
                            Id = -2,
                            AllowOther = false,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Weight",
                            IsActive = true,
                            IsNumber = true,
                            IsYesNo = false,
                            Name = "weight",
                            Order = 2,
                            TRT = 6
                        },
                        new
                        {
                            Id = -3,
                            AllowOther = false,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Marriage Status",
                            IsActive = true,
                            IsNumber = false,
                            IsYesNo = false,
                            Name = "marriage",
                            Order = 3,
                            TRT = 1
                        },
                        new
                        {
                            Id = -4,
                            AllowOther = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Education",
                            IsActive = true,
                            IsNumber = false,
                            IsYesNo = false,
                            Name = "education",
                            Order = 4,
                            TRT = 2
                        },
                        new
                        {
                            Id = -5,
                            AllowOther = true,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Career",
                            IsActive = true,
                            IsNumber = false,
                            IsYesNo = false,
                            Name = "career",
                            Order = 5,
                            TRT = 3
                        },
                        new
                        {
                            Id = -6,
                            AllowOther = false,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Income",
                            IsActive = true,
                            IsNumber = true,
                            IsYesNo = false,
                            Name = "income",
                            Order = 6,
                            TRT = 4
                        },
                        new
                        {
                            Id = -7,
                            AllowOther = false,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Smoke",
                            IsActive = true,
                            IsNumber = false,
                            IsYesNo = true,
                            Name = "smoke",
                            Order = 7,
                            TRT = 7
                        },
                        new
                        {
                            Id = -8,
                            AllowOther = false,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Drink",
                            IsActive = true,
                            IsNumber = false,
                            IsYesNo = true,
                            Name = "drink",
                            Order = 8,
                            TRT = 8
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.PatientMedicine", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PatientId", "MedicineId");

                    b.HasIndex("Type", "PatientId", "MedicineId")
                        .IsUnique()
                        .HasDatabaseName("Index_Unique");

                    b.ToTable("PatientMedicine");

                    b.HasDiscriminator<string>("Type").HasValue("PatientMedicine");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ProgressNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("A")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<string>("E")
                        .HasColumnType("text");

                    b.Property<string>("Focus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HemodialysisId")
                        .HasColumnType("uuid");

                    b.Property<string>("I")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<short>("Order")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("HemodialysisId");

                    b.ToTable("ProgressNotes");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bade702-40e6-4df4-890d-7f0c67d50207"),
                            ConcurrencyStamp = "296e852f-fbf5-4871-a12f-7f039db07929",
                            Name = "SuperAdministrator",
                            NormalizedName = "SUPERADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("e958724f-6db8-4434-a804-f0277f02306a"),
                            ConcurrencyStamp = "faf97553-37bf-4eb7-bd25-721f0b51de9b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("a7c93a18-5c50-4e28-b02d-3b50cc3e17f1"),
                            ConcurrencyStamp = "44e7df22-327d-4e8d-9f87-2f59bc6b1cdc",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = new Guid("baad21b1-6d08-4823-8cf3-0776a6266488"),
                            ConcurrencyStamp = "eab1f073-836a-42ad-9897-463792207f7d",
                            Name = "HeadNurse",
                            NormalizedName = "HEADNURSE"
                        },
                        new
                        {
                            Id = new Guid("f903d36f-2531-4916-86bb-7b051aac7029"),
                            ConcurrencyStamp = "1f165522-607b-4ffa-9885-a8a341fb01d0",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = new Guid("9453a296-a401-480b-bf81-bca7ab0f72a7"),
                            ConcurrencyStamp = "eeeef629-5a29-4607-98ef-9fa4a68ac365",
                            Name = "PN",
                            NormalizedName = "PN"
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<DateTime?>("OriginalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OverrideUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SectionId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ScheduleMeta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<TimeOnly?>("Section1")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("Section2")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("Section3")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("Section4")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("Section5")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("Section6")
                        .HasColumnType("time without time zone");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<string>("UnitName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("ScheduleMeta");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ScheduleSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.SectionSlotPatient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("PatientId", "SectionId", "Slot");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionSlotPatients");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ShiftIncharge", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UnitId", "Date");

                    b.ToTable("ShiftIncharges");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ShiftMeta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<DateOnly>("Month")
                        .HasColumnType("date");

                    b.Property<long>("ScheduleMetaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("ScheduleMetaId");

                    b.ToTable("ShiftMeta");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ShiftSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<short>("Data")
                        .HasColumnType("smallint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<long?>("ShiftMetaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShiftMetaId");

                    b.HasIndex("UserId", "Date")
                        .IsUnique()
                        .HasDatabaseName("shift_slot_unique_keys");

                    b.ToTable("ShiftSlots");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Category = 1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Hospital Transferred"
                        },
                        new
                        {
                            Id = -2,
                            Category = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Deceased"
                        },
                        new
                        {
                            Id = -3,
                            Category = 2,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Full Recovery"
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<bool>("Bold")
                        .HasColumnType("boolean");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("Italic")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StrikeThroughStyle")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.TempSection", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Delete")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TempSections");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Underlying", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("Underlyings");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "DM"
                        },
                        new
                        {
                            Id = -2,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "HT"
                        },
                        new
                        {
                            Id = -3,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "CKD"
                        },
                        new
                        {
                            Id = -4,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "CAD"
                        },
                        new
                        {
                            Id = -5,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Stroke"
                        },
                        new
                        {
                            Id = -6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "DLP"
                        },
                        new
                        {
                            Id = -7,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "SLE"
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<Guid?>("HeadNurse")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsActive = true,
                            Name = "Unit 1"
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsPartTime")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Signature")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("866dabc4-6501-44d2-a0e5-65da9c45a46e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aadf088b-cf32-4817-8cfc-2c3ae4615fcb",
                            EmailConfirmed = true,
                            FirstName = "root",
                            IsPartTime = false,
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "ROOTADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECMCAfv9MIbmyL/FfP+0ZaKk+COwT3IfxeviPM4NRZbhEvX+N0oAYWZsG0lPuKLasA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "244fb073-9c47-4d58-ad27-5bd36aef059a",
                            TwoFactorEnabled = false,
                            UserName = "rootadmin"
                        });
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.UserShift", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<DateOnly>("Month")
                        .HasColumnType("date");

                    b.Property<bool>("Suspended")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Month")
                        .IsUnique()
                        .HasDatabaseName("user_shift_unique_keys");

                    b.ToTable("UserShifts");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.UserUnit", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UnitId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUnits");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(995);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(996);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnOrder(999);

                    b.Property<bool>("IsICU")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(997);

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnOrder(998);

                    b.HasKey("Id");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.DialyzerStock", b =>
                {
                    b.HasBaseType("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.StockItemBase");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasIndex("ItemId");

                    b.ToTable("DialyzerStock", (string)null);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.EquipmentStock", b =>
                {
                    b.HasBaseType("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.StockItemBase");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasIndex("ItemId");

                    b.ToTable("EquipmentStock", (string)null);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.MedicalSupplyStock", b =>
                {
                    b.HasBaseType("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.StockItemBase");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasIndex("ItemId");

                    b.ToTable("MedicalSupplyStock", (string)null);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.MedicineStock", b =>
                {
                    b.HasBaseType("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.StockItemBase");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasIndex("ItemId");

                    b.ToTable("MedicineStock", (string)null);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.FlushRecord", b =>
                {
                    b.HasBaseType("Wasenshi.HemoDialysisPro.Models.ExecutionRecord");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.MedicineRecord", b =>
                {
                    b.HasBaseType("Wasenshi.HemoDialysisPro.Models.ExecutionRecord");

                    b.Property<float?>("OverrideDose")
                        .HasColumnType("real");

                    b.Property<int?>("OverrideRoute")
                        .HasColumnType("integer");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uuid");

                    b.HasIndex("PrescriptionId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.MappingModels.Allergy", b =>
                {
                    b.HasBaseType("Wasenshi.HemoDialysisPro.Models.PatientMedicine");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("Index_PatientId_Allergy");

                    b.HasDiscriminator().HasValue("Allergy");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.AdmissionUnderlying", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Admission", "Admission")
                        .WithMany("Underlying")
                        .HasForeignKey("AdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Admission_Underlying");

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Underlying", "Underlying")
                        .WithMany()
                        .HasForeignKey("UnderlyingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Underlying_Underlying");

                    b.Navigation("Admission");

                    b.Navigation("Underlying");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Assessment", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.AssessmentGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.AssessmentItem", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.HemodialysisRecord", "Hemosheet")
                        .WithMany()
                        .HasForeignKey("HemosheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Hemosheet");

                    b.Navigation("Assessment");

                    b.Navigation("Hemosheet");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.AssessmentOption", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Assessment", null)
                        .WithMany("OptionsList")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.DialysisRecordAssessmentItem", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.DialysisRecord", "DialysisRecord")
                        .WithMany("AssessmentItems")
                        .HasForeignKey("DialysisRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("DialysisRecord");

                    b.Navigation("Assessment");

                    b.Navigation("DialysisRecord");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Medicine", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.MedCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ExecutionRecord", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.HemodialysisRecord", "Hemodialysis")
                        .WithMany()
                        .HasForeignKey("HemodialysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hemodialysis");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.HemoNote", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.HemodialysisRecord", "Hemosheet")
                        .WithOne("Note")
                        .HasForeignKey("Wasenshi.HemoDialysisPro.Models.HemoNote", "HemoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hemosheet");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.HemodialysisRecord", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.DialysisPrescription", "DialysisPrescription")
                        .WithMany("HemodialysisRecords")
                        .HasForeignKey("DialysisPrescriptionId");

                    b.OwnsOne("Wasenshi.HemoDialysisPro.Models.AVShuntRecord", "AvShunt", b1 =>
                        {
                            b1.Property<Guid>("HemodialysisRecordId")
                                .HasColumnType("uuid");

                            b1.Property<float?>("ALength")
                                .HasColumnType("real");

                            b1.Property<float?>("ANeedleCC")
                                .HasColumnType("real");

                            b1.Property<short?>("ANeedleTimes")
                                .HasColumnType("smallint");

                            b1.Property<int?>("ASize")
                                .HasColumnType("integer");

                            b1.Property<Guid?>("AVShuntId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ShuntSite")
                                .HasColumnType("text");

                            b1.Property<float?>("VLength")
                                .HasColumnType("real");

                            b1.Property<float?>("VNeedleCC")
                                .HasColumnType("real");

                            b1.Property<short?>("VNeedleTimes")
                                .HasColumnType("smallint");

                            b1.Property<int?>("VSize")
                                .HasColumnType("integer");

                            b1.HasKey("HemodialysisRecordId");

                            b1.ToTable("HemodialysisRecords");

                            b1.WithOwner()
                                .HasForeignKey("HemodialysisRecordId");
                        });

                    b.OwnsOne("Wasenshi.HemoDialysisPro.Models.BloodCollectionRecord", "BloodCollection", b1 =>
                        {
                            b1.Property<Guid>("HemodialysisRecordId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Post")
                                .HasColumnType("text");

                            b1.Property<string>("Pre")
                                .HasColumnType("text");

                            b1.HasKey("HemodialysisRecordId");

                            b1.ToTable("HemodialysisRecords");

                            b1.WithOwner()
                                .HasForeignKey("HemodialysisRecordId");
                        });

                    b.OwnsOne("Wasenshi.HemoDialysisPro.Models.DehydrationRecord", "Dehydration", b1 =>
                        {
                            b1.Property<Guid>("HemodialysisRecordId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Abnormal")
                                .HasColumnType("boolean");

                            b1.Property<float?>("BloodTransfusion")
                                .HasColumnType("real");

                            b1.Property<DateTime?>("CheckInTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<float>("ClothWeight")
                                .HasColumnType("real");

                            b1.Property<float?>("ExtraFluid")
                                .HasColumnType("real");

                            b1.Property<float>("FoodDrinkWeight")
                                .HasColumnType("real");

                            b1.Property<float>("LastPostWeight")
                                .HasColumnType("real");

                            b1.Property<float>("PostTotalWeight")
                                .HasColumnType("real");

                            b1.Property<float>("PostWheelchairWeight")
                                .HasColumnType("real");

                            b1.Property<float>("PreTotalWeight")
                                .HasColumnType("real");

                            b1.Property<string>("Reason")
                                .HasColumnType("text");

                            b1.Property<float>("UFGoal")
                                .HasColumnType("real");

                            b1.Property<float>("WheelchairWeight")
                                .HasColumnType("real");

                            b1.HasKey("HemodialysisRecordId");

                            b1.ToTable("HemodialysisRecords");

                            b1.WithOwner()
                                .HasForeignKey("HemodialysisRecordId");
                        });

                    b.OwnsOne("Wasenshi.HemoDialysisPro.Models.DialyzerRecord", "Dialyzer", b1 =>
                        {
                            b1.Property<Guid>("HemodialysisRecordId")
                                .HasColumnType("uuid");

                            b1.Property<float>("TCV")
                                .HasColumnType("real");

                            b1.Property<int>("UseNo")
                                .HasColumnType("integer");

                            b1.HasKey("HemodialysisRecordId");

                            b1.ToTable("HemodialysisRecords");

                            b1.WithOwner()
                                .HasForeignKey("HemodialysisRecordId");
                        });

                    b.OwnsMany("Wasenshi.HemoDialysisPro.Models.VitalSignRecord", "PostVitalsign", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<int>("BPD")
                                .HasColumnType("integer");

                            b1.Property<int>("BPS")
                                .HasColumnType("integer");

                            b1.Property<int>("HR")
                                .HasColumnType("integer");

                            b1.Property<Guid>("HemodialysisRecordId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Posture")
                                .HasColumnType("integer");

                            b1.Property<int>("RR")
                                .HasColumnType("integer");

                            b1.Property<float>("SpO2")
                                .HasColumnType("real");

                            b1.Property<float>("Temp")
                                .HasColumnType("real");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id");

                            b1.HasIndex("HemodialysisRecordId");

                            b1.ToTable("HemodialysisRecords_PostVitalsign");

                            b1.WithOwner()
                                .HasForeignKey("HemodialysisRecordId");
                        });

                    b.OwnsMany("Wasenshi.HemoDialysisPro.Models.VitalSignRecord", "PreVitalsign", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<long>("Id"));

                            b1.Property<int>("BPD")
                                .HasColumnType("integer");

                            b1.Property<int>("BPS")
                                .HasColumnType("integer");

                            b1.Property<int>("HR")
                                .HasColumnType("integer");

                            b1.Property<Guid>("HemodialysisRecordId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Posture")
                                .HasColumnType("integer");

                            b1.Property<int>("RR")
                                .HasColumnType("integer");

                            b1.Property<float>("SpO2")
                                .HasColumnType("real");

                            b1.Property<float>("Temp")
                                .HasColumnType("real");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id");

                            b1.HasIndex("HemodialysisRecordId");

                            b1.ToTable("HemodialysisRecords_PreVitalsign");

                            b1.WithOwner()
                                .HasForeignKey("HemodialysisRecordId");
                        });

                    b.Navigation("AvShunt");

                    b.Navigation("BloodCollection");

                    b.Navigation("Dehydration");

                    b.Navigation("DialysisPrescription");

                    b.Navigation("Dialyzer");

                    b.Navigation("PostVitalsign");

                    b.Navigation("PreVitalsign");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Infrastructor.RoleClaim", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Infrastructor.UserClaim", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Infrastructor.UserLogin", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Infrastructor.UserRole", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Infrastructor.UserToken", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.LabExam", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.LabExamItem", "LabItem")
                        .WithMany()
                        .HasForeignKey("LabItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabItem");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.LabHemosheet", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.LabExamItem", "Item")
                        .WithOne()
                        .HasForeignKey("Wasenshi.HemoDialysisPro.Models.LabHemosheet", "LabItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.LabOverview", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.MedHistoryItem", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.MedicinePrescription", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Patient", b =>
                {
                    b.OwnsOne("Wasenshi.HemoDialysisPro.Models.DialysisInfo", "DialysisInfo", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("text");

                            b1.Property<int?>("AccumulatedTreatmentTimes")
                                .HasColumnType("integer");

                            b1.Property<string>("CauseOfDeath")
                                .HasColumnType("text");

                            b1.Property<string>("CauseOfKidneyDisease")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("EndDateAtHere")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("FirstTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("FirstTimeAtHere")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int?>("KidneyState")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("KidneyTransplant")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Status")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("TimeOfDeath")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("TransferTo")
                                .HasColumnType("text");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("Wasenshi.HemoDialysisPro.Models.EmergencyContact", "EmergencyContact", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("text");

                            b1.Property<string>("Relationship")
                                .HasColumnType("text");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("DialysisInfo");

                    b.Navigation("EmergencyContact");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.PatientHistoryItem", b =>
                {
                    b.OwnsMany("Wasenshi.HemoDialysisPro.Models.PatientChoice", "Choices", b1 =>
                        {
                            b1.Property<int>("PatientHistoryItemId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<float?>("NumberValue")
                                .HasColumnType("real");

                            b1.Property<string>("Text")
                                .HasColumnType("text");

                            b1.HasKey("PatientHistoryItemId", "Id");

                            b1.ToTable("PatientChoice");

                            b1.WithOwner()
                                .HasForeignKey("PatientHistoryItemId");

                            b1.HasData(
                                new
                                {
                                    PatientHistoryItemId = -3,
                                    Id = -99,
                                    Text = "Married"
                                },
                                new
                                {
                                    PatientHistoryItemId = -3,
                                    Id = -98,
                                    Text = "Divorced"
                                },
                                new
                                {
                                    PatientHistoryItemId = -3,
                                    Id = -97,
                                    Text = "Single"
                                },
                                new
                                {
                                    PatientHistoryItemId = -4,
                                    Id = -96,
                                    Text = "Primary School"
                                },
                                new
                                {
                                    PatientHistoryItemId = -4,
                                    Id = -95,
                                    Text = "Middle School"
                                },
                                new
                                {
                                    PatientHistoryItemId = -4,
                                    Id = -94,
                                    Text = "High School"
                                },
                                new
                                {
                                    PatientHistoryItemId = -4,
                                    Id = -93,
                                    Text = "Vocational Certificate"
                                },
                                new
                                {
                                    PatientHistoryItemId = -4,
                                    Id = -92,
                                    Text = "High Vocational Certificate"
                                },
                                new
                                {
                                    PatientHistoryItemId = -4,
                                    Id = -91,
                                    Text = "Diploma"
                                },
                                new
                                {
                                    PatientHistoryItemId = -4,
                                    Id = -90,
                                    Text = "Bachelor's Degree"
                                },
                                new
                                {
                                    PatientHistoryItemId = -4,
                                    Id = -89,
                                    Text = "Master's Degree"
                                },
                                new
                                {
                                    PatientHistoryItemId = -4,
                                    Id = -88,
                                    Text = "Doctor's Degree/ Ph.D."
                                },
                                new
                                {
                                    PatientHistoryItemId = -5,
                                    Id = -87,
                                    Text = "State Enterprise Employee"
                                },
                                new
                                {
                                    PatientHistoryItemId = -5,
                                    Id = -86,
                                    Text = "Business Owner"
                                },
                                new
                                {
                                    PatientHistoryItemId = -5,
                                    Id = -85,
                                    Text = "Goverment Officer"
                                },
                                new
                                {
                                    PatientHistoryItemId = -5,
                                    Id = -84,
                                    Text = "Employee"
                                },
                                new
                                {
                                    PatientHistoryItemId = -5,
                                    Id = -83,
                                    Text = "Freelance"
                                });
                        });

                    b.Navigation("Choices");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ProgressNote", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.HemodialysisRecord", "Hemodialysis")
                        .WithMany()
                        .HasForeignKey("HemodialysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hemodialysis");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Schedule", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.ScheduleSection", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ScheduleSection", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Unit", "Unit")
                        .WithMany("Sections")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.SectionSlotPatient", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.ScheduleSection", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ShiftIncharge", b =>
                {
                    b.OwnsMany("Wasenshi.HemoDialysisPro.Models.ShiftInchargeSection", "Sections", b1 =>
                        {
                            b1.Property<int>("ShiftInchargeUnitId")
                                .HasColumnType("integer");

                            b1.Property<DateOnly>("ShiftInchargeDate")
                                .HasColumnType("date");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("SectionId")
                                .HasColumnType("integer");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("ShiftInchargeUnitId", "ShiftInchargeDate", "Id");

                            b1.HasIndex("SectionId");

                            b1.ToTable("ShiftInchargeSection");

                            b1.HasOne("Wasenshi.HemoDialysisPro.Models.ScheduleSection", "Section")
                                .WithMany()
                                .HasForeignKey("SectionId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ShiftInchargeUnitId", "ShiftInchargeDate");

                            b1.Navigation("Section");
                        });

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ShiftMeta", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.ScheduleMeta", "ScheduleMeta")
                        .WithMany()
                        .HasForeignKey("ScheduleMetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleMeta");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.ShiftSlot", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.ShiftMeta", "ShiftMeta")
                        .WithMany()
                        .HasForeignKey("ShiftMetaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ShiftMeta");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Tag", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Patient", "Patient")
                        .WithMany("Tags")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.User", b =>
                {
                    b.OwnsMany("Wasenshi.HemoDialysisPro.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("text");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("text");

                            b1.Property<string>("Token")
                                .HasColumnType("text");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("RefreshToken", null, t =>
                                {
                                    t.ExcludeFromMigrations();
                                });

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.UserUnit", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.User", null)
                        .WithMany("Units")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.DialyzerStock", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.StockItemBase", null)
                        .WithOne()
                        .HasForeignKey("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.DialyzerStock", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Dialyzer", "ItemInfo")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemInfo");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.EquipmentStock", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.StockItemBase", null)
                        .WithOne()
                        .HasForeignKey("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.EquipmentStock", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Equipment", "ItemInfo")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemInfo");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.MedicalSupplyStock", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.StockItemBase", null)
                        .WithOne()
                        .HasForeignKey("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.MedicalSupplyStock", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.MedicalSupply", "ItemInfo")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemInfo");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.MedicineStock", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.StockItemBase", null)
                        .WithOne()
                        .HasForeignKey("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.MedicineStock", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Medicine", "ItemInfo")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemInfo");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.MedicineRecord", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.MedicinePrescription", "Prescription")
                        .WithMany("MedicineRecords")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.MappingModels.Allergy", b =>
                {
                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Medicine", "Medicine")
                        .WithMany("Allergies")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Medicine_Allergy");

                    b.HasOne("Wasenshi.HemoDialysisPro.Models.Patient", "Patient")
                        .WithMany("Allergy")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Patient_Allergy");

                    b.Navigation("Medicine");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Admission", b =>
                {
                    b.Navigation("Underlying");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Assessment", b =>
                {
                    b.Navigation("OptionsList");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.DialysisPrescription", b =>
                {
                    b.Navigation("HemodialysisRecords");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.DialysisRecord", b =>
                {
                    b.Navigation("AssessmentItems");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Entity.Stockable.Medicine", b =>
                {
                    b.Navigation("Allergies");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.HemodialysisRecord", b =>
                {
                    b.Navigation("Note");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.MedicinePrescription", b =>
                {
                    b.Navigation("MedicineRecords");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Patient", b =>
                {
                    b.Navigation("Allergy");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.Unit", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Wasenshi.HemoDialysisPro.Models.User", b =>
                {
                    b.Navigation("Units");
                });
#pragma warning restore 612, 618
        }
    }
}
